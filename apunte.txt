let productoprueba = [
{
    "title": "Funko Pop Televisión: Silicon Valley Gilfoyle",
    "price": 24990,
    "thumbnail": "https://m.media-amazon.com/images/I/41PsLYv3r2L._AC_.jpg",
    "id": 2,
    "timestamp": 888,
    "codigo": 456,
    "stock": 55,
    "descripcion": "funko pop de pelicula2"
}
    ]

const fs = require('fs')

let archivo;
function randomNumber(min,max){
    return Math.floor((Math.random() * (max-min + 1) + min));
  }

class Contenedor {
    constructor(nombre) {
        this.contenedor = nombre
    }

    //método "save": recibe un objeto, lo guarda en archivo y devuelve su id.
    async save(productoNuevo) {
        try {
            const datosExistentes = JSON.parse(await fs.promises.readFile(`./${this.contenedor}`, 'utf-8'));
            let arrayProductos = datosExistentes;

            if (arrayProductos.length == 0) {
                productoNuevo.id = 1
            } else {
                const identificadores = [];
                arrayProductos.forEach(element => identificadores.push(element.id));
                productoNuevo.id = (Math.max(...identificadores) + 1);
            }

            arrayProductos.push(productoNuevo);
            let arrayString = JSON.stringify(arrayProductos, null, 2)
            await fs.promises.writeFile(`./${this.contenedor}`, arrayString);
            console.log('Se ha guardado correctamente el producto')
            console.log(productoNuevo)
            console.log(`Se le asignó el Id: ${productoNuevo.id}`)
        }

        catch (error) {
            console.log('Ha ocurrido un error en el proceso', error)
        }
    }

    // método "getById()" recibe un id y retorna el objeto con ese id || null si no está.            
    async getById(num) {
        try {
            const datosExistentes = JSON.parse(await fs.promises.readFile(`./${this.contenedor}`, 'utf-8'));
            let arrayProductos = datosExistentes;
            const elementoBuscado = arrayProductos.find((element) => element.id == num);
            if (elementoBuscado == undefined) {
                console.log(`No se encuentra ningún elemento con el id: ${num}`)
                return (null)
            } else console.log('El producto solicitado es:')
            console.log(elementoBuscado);
            return elementoBuscado
        }
        catch (error) {
            console.log('Ha ocurrido un error en el proceso', error)

        }
    }

    // método "gelAll()" Devuelve un array con los objetos presentes en el archivo
    async getAll() {
        try {
            const datosExistentes = JSON.parse(await fs.promises.readFile(`./${this.contenedor}`, 'utf-8'));

            let arrayProductos = datosExistentes;
            if (arrayProductos.length == 0) {
                console.log('El archivo no contiene productos')
            } else  console.log(arrayProductos);
        }
        catch (error) {
            console.log('Ha ocurrido un error en el proceso', error)

        }
    }

    // método "deleteById" recibe un id y elimina el objeto con el id buscado.
    async deleteById(numero) {
        try {
            const datosExistentes = JSON.parse(await fs.promises.readFile(`./${this.contenedor}`, 'utf-8'));
            let arrayProductos = datosExistentes;
            let elementoParaBorrar = arrayProductos.findIndex((element) => element.id == numero);
            if (elementoParaBorrar != -1) {
                arrayProductos.splice((arrayProductos.findIndex((producto) => producto.id == numero)), 1);
                await fs.promises.writeFile(`./${this.contenedor}`, JSON.stringify(arrayProductos, null, 2));
                console.log('El producto ha sido correctamente eliminado')
            } else console.log('No se encuentra el producto con el id solicitado')
        }
        catch (error) {
            console.log('Ha ocurrido un error en el proceso', error)
        }
    }

    // método "deleteAll()"  Elimina todos los abjetosd presente en al archivo
    async deleteAll() {
        {
            try {
                await fs.promises.writeFile(`./${this.contenedor}`, "[ ]");
                console.log('Se han eliminado todos los productos')

            }

            catch (error) {
                console.log('Ha ocurrido un error en el proceso', error)
            }
        }

    }
}
//se utilizará el archivo llamado productos.txt
  archivo = new Contenedor('productos.txt') 

//función que obtiene un nùmero al azar entre dos limites dados


arrayCompleto = archivo.getAll();


//SERVIDOR CON EXPRESS

const express = require('express');
const app = express();
const port = 8080;

// app.use(express.static(__dirname + '/public'))

app.get('/', (req,res) =>{
    res.send('Entregable 3 - Servidor con express')
})

app.get('/productos', (req,res) => {
    let data = JSON.parse(archivo.getAll())
    res.send(`${data.title}`)    
})
app.get('/productoRandom', (req,res) =>{
    let todosProductos = [archivo.getAll()]
    const numeroAzar = randomNumber(0, todosProductos.length)
    let productoSolicitado = archivo.getById(numeroAzar)
    console.log(productoSolicitado)
    res.send('El producto al azar solicitado se ha desplegado correctamente por consola');
})
app.use((req, res, next) =>{
    res.status(404).sendFile(__dirname + '/public/404.html')
})
app.listen(port, ()=> {
    console.log(`El servidor se encuentra operativo y esperando solicitudesen el puerto ${port}`);
})





EJS TABLA
<% if(datos.length < 1) { %>
        <h2>No hay productos para mostrar</h2>
        
    <% } else { %>
          
                <tr style="background-color: lightblue; margin: 10px;">
                <th> Id </th>
                <th> Nombre </th>
                <th> Precio </th>
                <th> Imagen </th>
                </tr><br>
                <% for (var i=0; i < datos.length; i++) { %>
                    <tr>
                        <td>
                            <%= datos[i].id %>
                        </td>
                        <td>
                            <%= datos[i].title %>
                        </td>
                        <td>
                            <%= datos[i].price %>
                        </td>
                        <td>
                            <img src="<%= datos[i].thumbnail %>" alt="<%= datos[i].title %>" width="50px">
                        </td><br>
                    </tr>
                    <% } %>
            
        
             <% } %>
    </table>